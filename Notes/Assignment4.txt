										ASSINMENT 3: LAYING THE FOUNDATION


JSX => It's an extension of Javascript which allows us to write HTML like syntax in JavaScript. It makes it really easier to create and manipulate dynamic interfaces. This HTML like syntax is transformed into standard JS objects using a transpiler such a Babel.

e.g: JSX: const element = <button className="btn btn-primary">Click me</button>;
Converted into JS: const element = React.createElement("button", { className: "btn btn-primary" }, "Click me");

									<--------------------------------------->

React.createElement => It's a method provided by React library to create React elements programmatically using JS. It has 3 arguments: type of element, properties, child elements.
e.g: React.createElement('div', { className: 'my-class' }, 'Hello, world!');

									<--------------------------------------->

Benefits of JSX => 
1. Readability: Easy to read & understand the structure of UI.
2. Easy to learn: Similar to HTML
3. Improved performance: React can optimize the rendering of components when it detects changes in their state or props, which can reduce the number of DOM updates needed and improve performance.
4. Strong typing: Statically typed: Errors can be checked at compile time.
5. Customizable: define custom components and reuse.

									<--------------------------------------->

Behind the Scenes of JSX =>
JSX code is transpiled into JS:
1. Parsing: Through Babel -> AST
2. Transformation: AST -> JS, involves creating & updating DOM.
3. Bundling: Group up this JS file with other files/ dependencies by Parcel to make a package which is served to browser.
4. Execution: Bundled code is executed, React library takes control to create and update DOM.

									<--------------------------------------->
Babel & parcel role in JSX =>

Babel: Transpiler, converts JSX to JS or modern JS syntax to old so that browser can read. Have a plugin for JSX called @babel/plugin-transform-react-jsx, which converts JSX syntax into function calls that create React elements.

Parcel: Bundler, takes all files, gives one package which is served to browser.

									<--------------------------------------->

Components in React =>
Building blocks of React application, they're re-usable pieces of code, represent a part of UI like bottom, forms, entire section.
Two types: 
- Functional Component: Simple JS functions which take sime props and return a React element. Used for simple ones which don't require state or life cycle methods. Using a component inside another component is called composing component.
- Class Components.

									<-------------------Coding Part-------------------->


Create a Nested header Element using React.createElement(h1,h2,h3 inside a div with class “title”):

const myHeading = React.createElement(
    "div",
    {
        className : "title"
    },
    [
        React.createElement(
            "h1",
            {
                id: "h1"
            }, 
            "This is H1"
        ), 
        React.createElement(
            "h2",
            {
                id: "h2"
            }, 
            "This is H2"
        ), 
        React.createElement(
            "h3",
            {
                id: "h3"
            }, 
            "This is H3"
        )
    ]
);


Create the same element using JSX:

const myHeading1 = (
    <div className="title">
        <h1>This is h1</h1>
        <h2>This is h2</h2>
        <h3>This is h3</h3>
    </div>
);


Create a functional component of the same with JSX:

const myHeading2 = () => (
    <div className="title">
        <h1>This is h1</h1>
        <h2>This is h2</h2>
        <h3>This is h3</h3>
    </div>
);

									<--------------------------------------->
Create a Header Component from scratch using Functional Components with JSX
Add a Logo on left
Add a search bar in middle
Add User icon on right
Add CSS to make it look nice


Script file:

const Header = () => {
    return (
        <div className="header">
            <div className="logo">
                <img src="https://c4.wallpaperflare.com/wallpaper/328/540/963/beautiful-nature-scenes-images-1920x1200-wallpaper-preview.jpg" alt="" />
            </div>
            <div className="search">
                <input type="search" name="" id="" />
            </div>
            <div className="user">
                <img src="https://vastphotos.com/files/uploads/photos/11382/autumn-photo-wall-art-m.jpg?v=20221031150227" alt="" />
            </div>
        </div>
    );
}


const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(<Header/>); 

CSS file:


.header{
    display: flex;
    justify-content: space-between;
    margin: 10px;
    padding: 5px;
    background-color: rgba(249, 202, 99, 0.607);
    border-radius: 50px;
}

.logo, .user{
    width: 50px;
    height: 50px;
    overflow: hidden;
    border-radius: 50%;
    display: flex;
    justify-content: center; /* center horizontally */
    /* align-items: center; center vertically */
}

.search{
    display: flex;
    justify-content: center; /* center horizontally */
    align-items: center; /* center vertically */
}

.search > input{
    width: 300px;
    height: 30px;
}

.search > input:hover, img:hover{
    cursor: pointer;
}

img{
    max-width: 100%;
    max-height: 100%;
    object-fit: cover;
}








------------------------------------------------------ NOTES PROVIDED BY AKSHAY BHAIYA --------------------------------------------------

Running Notes of @akshaymarch7  's session on 01-01-2023:

Writing Scripts in package.json.

*Q. What converts New Code to Older Code(For older version Browsers)? 
A: Babel 
We do not need to write polyfill. Babel does it automatically.

npx - executing commands without downloading packages
npm - will download required packages

Note: Parcel will not remove console.log automatically. We need to configure for it. There is a package for it, named 'babel-plugin-transform-remove-console' either from babel website or npmjs website: npm install babel-plugin-transform-remove-console --save-dev /-D

Usage: 1.via .babelrc (recommended)
    2. via CLI
    3. via NodeAPI

React-key Reconciliation :
When there are siblings in an array, we need to give keys for each sibling
HW: Read about React-key Reconciliation from React Docs.

React.createElement gives us an Object, which is then converted to html and puts into DOM
JSX uses React.createElement (behind the scenes), which gives Object, and then into HTML, and it is put into DOM
Babel does it. Babel converts JSX. JSX was developed by Facebook.
Babel is must to use JSX.

Q. Is JSX HTML inside JS? No. 
A: JSX is a HTML like Syntax, and not HTML inside JS.

Babel: Compiler for JS.
Read Babel Docs: babeljs.io
Play with Babel in it's website.
Babel comes along with Parcel.

Also Go to it's GitHub Repo, and read about its algorithms.

React Component:
2 Types:
1. Functional Component- NEW
2. Class Based Component - OLD

Functional Comp is just a normal function that returns some piece of JSX, or a react element, or a function. 

Name of a Component starts with a Capital Letter (not mandatory, but good practice to use)

If we have to write multiple lines to be returned in a component, we need to use ()and ; at the end.

 For Homework, use Normal Convention.

Continued... Part 2

Hope it was Helpful ??
Notes Part 2:

Diff b/n React Element & React Component:

React Element is returning an Object.
React Component is a function that returns JSX, or a react element, or a function.

Syntax When rendering:
For React Element, We use root.render(element_name);
For React Component, We use Angular brackets: root.render(<ComponentName />);

 Any piece of Javascript code can be written within {} 

XSS - Cross site scripting (XSS) is an attack in which an attacker injects malicious executable scripts into the code of a trusted application or website. Attackers often initiate an XSS attack by sending a malicious link to a user and enticing the user to click it.

JSX takes care of XSS.

*Interview Q: Component Composition:
A: Writing/ Passing component inside component.

Home Work:
1. Read about React-key Reconciliation from React Docs.
2. Do Whatever Akshay did in the Session.

*

Hope it was Helpful ??







